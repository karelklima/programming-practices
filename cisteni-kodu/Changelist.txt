Changelist
==========

1) Obecne zmeny
	- preklad nazvu promennych a metod do anglictiny
	- TODO vyuziti C# property namisto public hodnot
	- pouziti obecneho typu "var" pro promenne vsude, kde to jde - typova inference
	- jmenne konvence dle MSDN naming guidelines:
		- tridy, metody, properties, namespaces: UpperCamelCase
		- lokalni, promenne, parametry: lowerCamelCase
		- konstanty: UPPER_CASE (odchyleni od naming guidelines)
		- private fields: _lowerCamelCase
	- uprava API - nahrazeni public fields pouzitim C# properties s asymetrickym pristupem
	- typedef RankedNodesDictionary pro System.Collections.Generic.SortedDictionary<int, List<Node>>
	- metody kontroluji validitu parametru a pripadne vyhazuji ArgumentException nebo ArgumentNullException
	- prepsani nekterych for cyklu pomoci while
	- prepsani nekterych foreach cyklu pomoci LINQ
	- podminky a cykly typu "x != 1" => "x > 1", pokud ocekavam hodnoty jedna a vice
	- zapouzdreni promennych v cyklech - presunuti deklarace do cyklu, aby nebyly videt vne
	- odebrani redundanci z kodu - inicializace promennych defaultni hodnotou, zbytecne pretypovani

2) Konkretni zmeny
	- rozdeleni do namespaces HuffmanCoding a MFFUK
	- prejmenovani trid vrchol -> Node, strom -> Tree, Nacitacka -> Reader

	- vrchol -> Node
		- konstruktor
			- zmena poradi parametru - character, rank, leftChildNode, rightChildNode
			- druhy pomocny konstruktor pouze pro jeden parametr character
		- vrchol.JeList() > bool property Node.IsLeaf
		- odebrani #region pro IComparable Members - zbytecny
		- vrchol.BudeVrcholVlevo -> Node.IsLeftOf(Node otherNode)
			- refactoring metody
			- pridani vyjimky ArgumentException, pokud maji obe Node stejny znak
		- counter instanci
			- readonly int _nodeIndex, static int _nodeInstancesCount
				- readonly - lze zmenit pouze v konstruktoru

	- strom -> Tree
		- postavStrom -> Build
			- refactoring
			- rozdeleni do nekolika funkci, odebrani redundandniho kodu
			- LINQ expression pro sumu zbyvajicich vrcholu
			- while cyklus plus pomocne metody
				- while cyklus komplikovany, protoze obsahuje cely algoritmus
				- InsertNodePairsToRankedNodes
				- InsertNodeToRankedNodes
				- CreateParentNode
				

 - Translating
 - if conditions simplifying
 - divide into namespaces
 - class variables & methods rearrangement
 - PrintTreePrefixed refractoring:
   - remove unnessary variable & conditions
   - replace hex number with decimal
 - HuffmanCoding.Reader.OpenFile: deleted, refractored code moved into ReadFile method
 - HuffmanCoding.Reader.ReadFile:
   - magic numbers -> class constants
   - magic numbers -> class methods (256 -> .Length in for cycle)
   - for -> while cycle replacement
   - merge two cycles (main cycle + last chunk cycle)
 - Program:
   - static variables moved into methods 
 - replace datatypes with "var" keywork
 - typedef for System.Collections.Generic.SortedDictionary<int, List<Node>>